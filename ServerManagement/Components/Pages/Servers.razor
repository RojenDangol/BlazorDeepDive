@page "/servers"
@page "/servers/back_from/{cityName}"
@using ServerManagement.StateStore

@inject NavigationManager NavigationManager;
@inject TorontoOnlineServersStore TorontoOnlineServersStore;

@rendermode InteractiveServer

<h3>Servers</h3>
<br />

<CityListComponent @ref="cityListComponent" SelectCityCallback="HandleCitySelection" selectedCity="@this.selectedCity"></CityListComponent>
<br />

<SearchBarComponent @ref="searchBarComponent" SearchServerCallback="HandleSearch"></SearchBarComponent>


<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent 
        @rendermode="InteractiveServer" 
        CityName="@this.selectedCity" 
        SearchFilter="@searchFilter"></ServerListComponent>
</CascadingValue>


<p>
    <a href="/server" class="btn btn-primary">Add Server</a>
</p>


@code {
    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string searchFilter = "";

    private CityListComponent? cityListComponent;

    private SearchBarComponent? searchBarComponent;

    private void HandleCitySelection(string cityName)
    {
        selectedCity = cityName;
        this.searchFilter = string.Empty;
        searchBarComponent?.ClearFilter();
    }

    private void HandleSearch(string searchFilter)
    {
        this.searchFilter = searchFilter;

        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (NavigationManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }

            var serversToronto = ServersRepository.GetServersByCity("Toronto");
            if(serversToronto is not null)
            {
                TorontoOnlineServersStore.SetNumbersServersOnline(serversToronto.Count(s => s.IsOnline));
            }
        }
    }
}
