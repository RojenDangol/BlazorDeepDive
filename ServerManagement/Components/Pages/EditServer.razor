@page "/servers/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<h3>Edit Server</h3>
<br />
<br />
@if(server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @* <ValidationSummary></ValidationSummary> *@
        
        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="IsOnline">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>
        <button type="submit" class="btn btn-primary mt-2">Update</button>
        &nbsp;
        <a href="/servers" class="btn btn-primary mt-2">Close</a>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServersRepository.GetServerById(this.Id);
    }

    private void Submit()
    {
        if(server!= null)
        {
            ServersRepository.UpdateServer(server.ServerId, server);
        }
        NavigationManager.NavigateTo("/servers");
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?");
        if (!isConfirmed)
        {
            context.PreventNavigation();
        }
    }

}
